apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongos1
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mongodb/mongos1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongos1
spec:
  resources:
    requests:
      storage: 2Gi
  accessModes:
    - ReadWriteOnce # only allow one node can be read and write
  storageClassName: ""
---
apiVersion: v1
kind: Service
metadata:
  name: mongos1
  labels:
    run: mongos1
spec:
  type: NodePort
  ports:
    - port: 27017
      protocol: TCP
  selector:
    run: mongos1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongos1
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongos1
  serviceName: mongos1
  template:
    metadata:
      labels:
        name: mongos1
        run: mongos1
    spec:
      restartPolicy: Always
      hostname: mongos1
      containers:
        - image: mongo:latest
          name: mongos1
          ports:
            - name: mongos1
              containerPort: 27017
          volumeMounts:
            - name: mongos1
              mountPath: /data/db
          command: ["mongos"]
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          args: ["--configdb", "cfgrs/mongocfg1:27019,mongocfg2:27019,mongocfg3:27019", "--bind_ip_all"]
      volumes:
        - name: mongos1
          persistentVolumeClaim:
            claimName: mongos1

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongos2
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mongodb/mongos2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongos2
spec:
  resources:
    requests:
      storage: 2Gi
  accessModes:
    - ReadWriteOnce # only allow one node can be read and write
  storageClassName: ""
---
apiVersion: v1
kind: Service
metadata:
  name: mongos2
  labels:
    run: mongos2
spec:
  ports:
    - port: 27017
      protocol: TCP
  selector:
    run: mongos2
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongos2
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongos2
  serviceName: mongos2
  template:
    metadata:
      labels:
        name: mongos2
        run: mongos2
    spec:
      restartPolicy: Always
      hostname: mongos1
      containers:
        - image: mongo:latest
          name: mongos2
          ports:
            - name: mongos2
              containerPort: 27017
          volumeMounts:
            - name: mongos2
              mountPath: /data/db
          command: ["mongos"]
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          args: ["--configdb", "cfgrs/mongocfg1:27019,mongocfg2:27019,mongocfg3:27019", "--bind_ip_all"]
      volumes:
        - name: mongos2
          persistentVolumeClaim:
            claimName: mongos2

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongos3
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mongodb/mongos3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongos3
spec:
  resources:
    requests:
      storage: 2Gi
  accessModes:
    - ReadWriteOnce # only allow one node can be read and write
  storageClassName: ""
---
apiVersion: v1
kind: Service
metadata:
  name: mongos3
  labels:
    run: mongos3
spec:
  ports:
    - port: 27017
      protocol: TCP
  selector:
    run: mongos3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongos3
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongos3
  serviceName: mongos3
  template:
    metadata:
      labels:
        name: mongos3
        run: mongos3
    spec:
      restartPolicy: Always
      hostname: mongos1
      containers:
        - image: mongo:latest
          name: mongos3
          ports:
            - name: mongos3
              containerPort: 27017
          volumeMounts:
            - name: mongos3
              mountPath: /data/db
          command: ["mongos"]
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          args: ["--configdb", "cfgrs/mongocfg1:27019,mongocfg2:27019,mongocfg3:27019", "--bind_ip_all"]
      volumes:
        - name: mongos3
          persistentVolumeClaim:
            claimName: mongos3
